#include <Servo.h>

Servo myservo;  // Membuat objek servo

int pos = 0;    // Variabel untuk posisi sudut servo
const int buzzerPin = D3;  // Mengatur pin untuk buzzer

void setup() {
  myservo.attach(D4);  // Menghubungkan servo ke pin D4
  pinMode(buzzerPin, OUTPUT);  // Mengatur pin buzzer sebagai output
}

void loop() {
  // Menyalakan buzzer saat servo bergerak dari 0 hingga 180 derajat
  digitalWrite(buzzerPin, HIGH);  // Menghidupkan buzzer

  for (pos = 0; pos <= 180; pos += 1) {
    myservo.write(pos);  // Menggerakkan servo ke posisi 'pos'
    delay(5);           // Menunggu servo mencapai posisi
  }

  delay(5000);  // Jeda berhenti 1 detik saat servo di posisi 180 derajat

  // Mematikan buzzer saat servo bergerak dari 180 ke 0 derajat
  // Menyalakan buzzer saat servo bergerak kembali ke 0 derajat
  for (pos = 180; pos >= 0; pos -= 1) {
    myservo.write(pos);  // Menggerakkan servo ke posisi 'pos'
    digitalWrite(buzzerPin, HIGH);  // Menghidupkan buzzer
    delay(5);           // Menunggu servo mencapai posisi
  }

  // Mematikan buzzer setelah servo mencapai 0 derajat
  digitalWrite(buzzerPin, LOW);  // Mematikan buzzer

  delay(5000);  // Jeda berhenti 1 detik saat servo di posisi 0 derajat
}





#include <ESP8266WiFi.h>
#include <Servo.h>

Servo myservo;  // Membuat objek servo
int pos = 0;    // Variabel untuk posisi sudut servo
const int buzzerPin = D3;  // Mengatur pin untuk buzzer

const char* ssid = "dk";  // Ganti dengan SSID Wi-Fi Anda
const char* password = "99999999";  // Ganti dengan password Wi-Fi Anda

WiFiServer server(80);  // Membuat server pada port 80

void setup() {
  myservo.attach(D4);  // Menghubungkan servo ke pin D4
  pinMode(buzzerPin, OUTPUT);  // Mengatur pin buzzer sebagai output
  Serial.begin(115200);
  
  WiFi.begin(ssid, password);  // Menghubungkan ke Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Menghubungkan...");
  }
  Serial.println("Terhubung!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  
  server.begin();  // Memulai server
}

void loop() {
  WiFiClient client = server.available();  // Mendengarkan klien
  if (client) {
    String currentLine = "";  // Variabel untuk menyimpan baris data
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();  // Membaca karakter dari klien
        Serial.write(c);  // Menulis karakter ke Serial Monitor
        currentLine += c;  // Menambahkan karakter ke currentLine

        // Jika menerima garis baru dari klien
        if (c == '\n') {
          // Periksa apakah ada perintah untuk menggerakkan servo
          if (currentLine.indexOf("GET /move?angle=") >= 0) {
            int angleStart = currentLine.indexOf('=') + 1;
            int angleEnd = currentLine.indexOf(' ', angleStart);
            int angle = currentLine.substring(angleStart, angleEnd).toInt();

            // Menghidupkan buzzer
            digitalWrite(buzzerPin, HIGH);
            myservo.write(angle);  // Menggerakkan servo ke sudut yang diterima
            delay(1000);           // Menunggu servo mencapai posisi
            // Mematikan buzzer
            digitalWrite(buzzerPin, LOW);
          }

          // Menutup koneksi
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println();
          client.println("Servo telah bergerak!");
          break;
        }
      }
    }
    client.stop();  // Menutup koneksi klien
  }
}





import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Servo Control',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ServoControlPage(),
    );
  }
}

class ServoControlPage extends StatelessWidget {
  final String ipAddress = '192.168.x.x'; // Ganti dengan alamat IP ESP8266 Anda

  Future<void> moveServo(int angle) async {
    final response = await http.get(Uri.parse('http://$ipAddress/move?angle=$angle'));
    if (response.statusCode == 200) {
      print('Servo moved to $angle degrees');
    } else {
      print('Failed to move servo');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Control Servo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () => moveServo(0),
              child: Text('Move to 0°'),
            ),
            ElevatedButton(
              onPressed: () => moveServo(90),
              child: Text('Move to 90°'),
            ),
            ElevatedButton(
              onPressed: () => moveServo(180),
              child: Text('Move to 180°'),
            ),
          ],
        ),
      ),
    );
  }
}




#include <Servo.h>

Servo myServo;  // Create servo object to control an MG90S

int servoPin = D4;  // Pin connected to the servo signal wire

void setup() {
  myServo.attach(servoPin);  // Attach the servo on pin D4
}

void loop() {
  myServo.write(0);   // Move servo to 0 degrees
  delay(1000);        // Wait for a second
  
  myServo.write(90);  // Move servo to 90 degrees
  delay(1000);        // Wait for a second
  
  myServo.write(180); // Move servo to 180 degrees
  delay(1000);        // Wait for a second
}
